<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<link rel="shortcut icon" href="https://www.axway.com/themes/custom/axway/favicon.ico" type="image/vnd.microsoft.icon">
	<title>Pet Store</title>

	<!-- CSS -->
	<link class="platform-theme theme-light" rel="stylesheet" type="text/css"
		  href="https://d3cd0f9bgii318.cloudfront.net/current/css/style.css" media="">
	<style>
		body {
			padding-top: 49px;
		}

		.pet-grid {
			max-height: 14em;
			max-width: 100%;
		}

		.pet-del {
			cursor: pointer;
			color: gray;
		}
	</style>

	<!-- JS -->
	<script src="https://{{ platformHostname }}/unified-nav.js?login=1&signin=0&data=1&feed=0&analytics=0"></script>
	<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
	<script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
	<script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
</head>

<body>
	<!-- banner -->
	<div class="bg-varicose-vein txt-white">
		<div class="container pt-45 pb-4 text-center">
			<div class="display-4">Pet Store</div>
			<p>
				<span id="app-user-info"></span>
			</p>
		</div>
	</div>
	<!-- buttons -->
	<div class="pb-0 pt-25 pr-25 text-right">
		<button class="btn btn-primary" data-toggle="modal" data-target="#add-pet-modal">
			Add Pet
		</button>
	</div>
	<!-- content -->
	<div class="container-fluid pt-25 pb-45 pr-45 pl-45">
		<div id="pet-modal"></div>

		<!-- pet grid -->
		<div id="pet-tiles" class="row"></div>
	</div>
</body>

<script>
	let prefix = 'ws';
	let redrawGrid;

	if (location.protocol.startsWith('https')) {
		prefix += 's';
	}

	// react components
	class UserInfo extends React.Component {
		render() {
			return React.createElement(
				'span',
				null,
				null,
				`You are logged as ${this.props.firstname} ${this.props.lastname}, ${this.props.role} in ${this.props.org}`
			);
		}
	}

	class PetModal extends React.Component {
		constructor(props) {
			super(props);

			this.state = {
				petName: '',
				petType: '',
				petTypes: [ 'Other' ],
				petImage: '',
				errorMessage: false
			};

			this.handleChange = this.handleChange.bind(this);
		}

		componentDidMount() {
			var self = this;
			var request = new XMLHttpRequest();
			request.addEventListener("load", function () {
				try {
					let types = [];
					let session = JSON.parse(this.responseText);

					Object.keys(session.result.org.entitlements).forEach(function (entitlement) {
						if (entitlement.includes('PetStore.')) {
							types.push(entitlement.split('.')[1]);
						}
					});

					types.push('Other');

					self.setState({
						petTypes: types
					});
				} catch(e) {
					console.log(e);
				}
			});
			request.open('GET', 'https://{{ platformHostname }}/api/v1/auth/findSession');
			request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
			request.withCredentials = true; // this option is required send the browser cookies in the request
			request.send();
		}

		handleChange(event) {
			let target = event.target;
			let value = target.value;
			let name = target.name;

			this.setState({
				[name]: value
			});
		}

		getPetType() {
			return this.state.petType || this.state.petTypes[0];
		}

		render() {
			let options = [];
			let errorClass = 'd-none';

			if (this.state.errorMessage) {
				errorClass = 'alert alert-danger text-center';
			}

			// build pet types
			this.state.petTypes.forEach((type) => {
				options.push(React.createElement(
					'option',
					{ key: type },
					type
				));
			});

			let element =
				React.createElement('div', { id: 'add-pet-modal', className: 'modal fade', tabIndex: '-1', role: 'dialog', 'aria-labelledby': 'add-pet-label', 'aria-hidden': 'true' },
					React.createElement('div', { className: 'modal-dialog', role: 'document' },
						React.createElement('div', { className: 'modal-content' },
							React.createElement('div', { className: 'modal-header' },
								React.createElement('h5', { id: 'add-pet-label', className: 'modal-title' }, 'Add Pet'),
								React.createElement('button', { type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close'},
									React.createElement('span', { 'aria-hidden': 'true'}, '×'))),
							React.createElement('div', { className: 'modal-body' },
								React.createElement('div', { className: errorClass, role: 'alert' }, this.state.errorMessage),
								React.createElement('form', { id: 'form-pet-add' },
									React.createElement('div', { className: 'form-group '},
										React.createElement('label', { htmlFor: 'add-pet-name' }, 'Pet Name'),
										React.createElement('input', { id: 'add-pet-name', type: 'text', className: 'form-control', name: "petName", value: this.state.petName, onChange: this.handleChange })),
									React.createElement('div', { className: 'form-group'},
										React.createElement('label', { className: 'add-pet-type' }, 'Pet Type'),
										React.createElement('select', { id: 'add-pet-type', className: 'form-control', name: 'petType', value: getPetType(), onChange: this.handleChange }, options)),
									React.createElement('div', { className: 'form-group' },
										React.createElement('label', { htmlFor: 'add-pet-image' }, 'Pet Image'),
										React.createElement('input', { id: 'add-pet-image', type: 'text', className: 'form-control', name: "petImage", value: this.state.petImage, onChange: this.handleChange }),
										React.createElement('small', { className: 'form-text text-muted'})))),
							React.createElement('div', { className: 'modal-footer' },
								React.createElement('button', { type: 'button', className: 'btn btn-secondary', 'data-dismiss': 'modal' }, 'Close'),
								React.createElement('button', { type: 'button', className: 'btn btn-primary', onClick: () => this.create() }, 'Submit')))));

			return element;
		}

		create() {
			let self = this;
			let data = {
				name: this.state.petName,
				type: getPetType(),
				photo: this.state.petImage
			};

			let request = new XMLHttpRequest();

			request.addEventListener("load", function () {
				if (this.status === 422) {
					self.setState({
						errorMessage: data.type + ' type limit reached, try some 🐟!'
					});
				} else if (this.status !== 204) {
					self.setState({
						errorMessage: 'Unexpected error'
					});
				} else {
					self.setState({
						petName: '',
						petImage: '',
						errorMessage: false
					});

					$('#add-pet-modal').modal('hide');

					redrawGrid();
				}
			});
			request.open('POST', '{{ apiUrl }}/pet', true);
			request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
			request.send(JSON.stringify(data));
		}
	}

	class PetGrid extends React.Component {
		ws = new WebSocket(prefix + '://' + location.host + '/ws');

		constructor(props) {
			super(props);
			this.state = { pets: [] };
			redrawGrid = this.tick.bind(this);
		}

		componentDidMount() {
			this.tick();
			this.ws.onmessage = (evt) => {
				if (evt.data === 'RELOAD') {
					this.tick();
				}
			}
		}

		tick() {
			let self = this;
			let request = new XMLHttpRequest();
			request.addEventListener("load", function () {
				self.setState({ pets: JSON.parse(this.responseText) });
			});
			request.open('GET', '{{ apiUrl }}/pet');
			request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
			request.send();
		}

		render() {
			let children = [];
			let deleteClass = 'pet-del';

			if (!Appc.loggedIn() || Appc.data('session').role !== 'administrator') {
				deleteClass += ' d-none';
			}

			this.state.pets.forEach(pet => {
				let label = `${pet.name} (${pet.type})`;
				label = label[0].toUpperCase() + label.slice(1);

				let element =
					React.createElement('div', { key: pet.id, className: 'col-xl-3 col-lg-4 col-md-6 col-sm-12' },
						React.createElement('div', { className: 'landing-tile text-center my-25' },
							React.createElement('div', { className: 'px-25 pt-3' },
								React.createElement('img', { className: 'pet-grid', src: pet.photo })),
							React.createElement('div', { className: 'landing-actions bg-feather p-2 pt-1' },
								React.createElement('span', { className: 'd-inline-block pt-1 px-2 text-nowrap align-middle font-weight-bold' }, label),
								React.createElement('div', { className: deleteClass, onClick: () => this.delete(pet.id) }, 'Delete',
									React.createElement('i', { className: 'pl-2 platform-icon-trash icon-sm'})))));
				children.push(element);
			});

			return children;
		}

		delete(id) {
			let request = new XMLHttpRequest();
			request.addEventListener("load", () => {
				this.tick();
			});
			request.open('DELETE', '{{ apiUrl }}/pet/' + id);
			request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
			request.send();
		}
	}

	// set unified nav title
	Appc.afterHeaderRender(function () {
		Appc.setSitename('Platform Pet Store');
	});

	// unified nav api
	if (Appc.loggedIn()) {
		let user = Appc.data('user');
		let org = Appc.data('org');
		let session = Appc.data('session');

		ReactDOM.render(
			React.createElement(UserInfo, {
				firstname: user.firstname,
				lastname: user.lastname,
				role: session.role,
				org: org.name
			}),
			document.getElementById('app-user-info')
		);

		ReactDOM.render(
			React.createElement(PetModal, {}, null),
			document.getElementById('pet-modal')
		);

		ReactDOM.render(
			React.createElement(PetGrid, {}, null),
			document.getElementById('pet-tiles')
		);
	}
</script>

</html>
